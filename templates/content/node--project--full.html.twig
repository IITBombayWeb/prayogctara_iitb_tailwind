{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}
{% set tailwindClassesTitle = [
    'text-pryg-blue-v2',
    'mr-10'
] %}
<article{{ attributes.addClass('pryg-container') }}>
  {% if label %}
    <h2{{ title_attributes.addClass(tailwindClassesTitle) }}>
      {{ label }}
    </h2>
  {% endif %}
    <div class="py-10">
        <div class="mr-10 py-4">
            {% if node.field_thumbnail.entity.fileuri %}
            <img class="h-96 w-5/6 rounded-2xl object-cover" src="{{ file_url(node.field_thumbnail.entity.fileuri) }}" alt="">
            {% else %}
            <img class="h-96 w-5/6 rounded-2xl object-cover" src="https://images.unsplash.com/photo-1509580357930-a711cf9d888d?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=2070&q=80" alt="">
            {% endif %}
        </div>
        <div class="grid grid-cols-3 gap-3">
            <div class="">
              <div>
                <h6 class="py-5 px-4 bg-pryg-blue-v1 text-pryg-white-v1">Thematic Areas</h6>
                <p class="text-xl">
                  {{ content.field_thematic_area}}
                </p>
              </div>
            {# {% set policyColor = 'bg-pryg-' %} #}
              <div>
                <h6 class="py-5 px-4 bg-pryg-yellow text-pryg-white-v1">Project Type</h6>
                <p class="text-xl">
                    {{content.field_3p_s_category}}
                </p>
              </div>
            </div>
            <div>
                <h6 class="py-5 px-4 text-pryg-white-v1 bg-pryg-gray-v1">Project Outcomes</h6>
                <p>
                    {{content.body}}
                </p>
            </div>
            <div>
                <h6 class="py-5 px-4 text-pryg-white-v1 bg-pryg-gray-v1">Project Uniqueness</h6>
                <p>
                    {{ node.body.summary }}
                </p>
            </div>
        </div>
    </div>

  {# <div{{ content_attributes }}>
    {{ kint(content) }}
  </div> #}

  {# {% if display_submitted %}
    <footer>
      {{ author_picture }}
      <div{{ author_attributes }}>
        {% trans %}Submitted by {{ author_name }} on {{ date }}{% endtrans %}
        {{ metadata }}
      </div>
    </footer>
  {% endif %} #}
</article>
{# {{ label }} #}
